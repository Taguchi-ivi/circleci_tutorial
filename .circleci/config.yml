# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
#     docker:
#       - image: cimg/base:stable
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#     steps:
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World!"

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello

# --------------------------------------
# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: alpine:3.15
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - run:
#           name: The First Step
#           command: |
#             echo 'Hello World!'
#             echo 'This is the delivery pipeline'

# 1 行目: 使用している CircleCI プラットフォームのバージョンを示します。 2.1 が最新のバージョンです。
# 2 行目: jobs レベルには、子ジョブのコレクションが含まれ、ジョブを表しています。 これらのジョブの名前を指定します (build、test、deploy など)。
# 3 行目: build は、jobs コレクションの最初の子ジョブです。 このサンプルでは、build は唯一のジョブでもあります。
# 4 行目: これは、ジョブのコマンドが実行されるコンテナに対し Docker イメージを使用していることを示します。
# 5 行目: これが Docker イメージです。 このサンプルでは、Alpine Linux に基づいたミニマムイメージである alpine:3.15 を示します。
# 6-8 行目: Docker レジストリの認証情報を記載します。 この部分はオプションです。 詳細は、 Docker の認証付きプルの使用 を参照して下さい。
# 9 行目: steps コレクションは、run ディレクティブのリストです。
# 10 行目: 各 run ディレクティブは、宣言された順に実行されます。
# 11 行目: name 属性は、警告、エラー、出力などを返す際に関連情報を提供します。 name は、ビルドプロセス内のアクションとしてわかりやすいものにする必要があります。
# 12 行目: command 属性は、実行するシェルコマンドのリストです。 最初のパイプ | は、複数行のシェルコマンドがあることを示します。
# 13 行目: ビルドシェルに Hello World! を出力します。
# 14 行目: This is the delivery pipeline と出力します。

# ----------------------------------------
# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: cimg/base:2021.04
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - checkout
#       - run:
#           name: The First Step
#           command: |
#             echo 'Hello World!'
#             echo 'This is the delivery pipeline'
#       - run:
#           name: The Second Step
#           command: |
#             ls -al
#             echo '^^^The files in your repo^^^'

# 2 つの小さな変更により、設定ファイルの機能が著しく向上します。
# 5 行目: この行は、Git をサポートする Docker イメージを示します。 
#      cimg/base:2021.04 は、基本的なジョブを実行する Ubuntu ベースの小さなイメージです。
# 10 行目: checkout コマンドは、Git リポジトリからコードをフェッチします。
# 16-20 行目: build ジョブのこの 2 つ目のステップは、
#        すでにチェックアウトされているリポジトリの内容を、(ls -al を使用して) リストします。 
#        これで、このリポジトリでさらに多くのアクションを実行できます。

# -------------------------------------------
  # version: 2.1
  # jobs:
  #   # running commands on a basic image
  #   Hello-World:
  #     docker:
  #       - image: cimg/base:2021.04
  #         auth:
  #           username: mydockerhub-user
  #           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #     steps:
  #       - run:
  #           name: Saying Hello
  #           command: |
  #             echo 'Hello World!'
  #             echo 'This is the delivery pipeline'
  #   # fetching code from the repo
  #   Fetch-Code:
  #     docker:
  #       - image: cimg/base:2021.04
  #         auth:
  #           username: mydockerhub-user
  #           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #     steps:
  #       - checkout
  #       - run:
  #           name: Getting the Code
  #           command: |
  #             ls -al
  #             echo '^^^Your repo files^^^'
  #   # running a node container
  #   Using-Node:
  #     docker:
  #       - image: cimg/node:17.2
  #         auth:
  #           username: mydockerhub-user
  #           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #     steps:
  #       - run:
  #           name: Running the Node Container
  #           command: |
  #             node -v
  # workflows:
  #   Example-Workflow:
  #     jobs:
  #       - Hello-World
  #       - Fetch-Code:
  #           requires:
  #             - Hello-World
  #       - Using-Node:
  #           requires:
  #             - Fetch-Code

# この例では 3 つのジョブが含まれています。
#     こうしたステップをジョブに分離することで、そのそれぞれを異なる環境で実行できるようになります。
# 上記サンプルコードの各行について、以下で解説します。
# 3 行目: # (ハッシュ) 記号をコメントの前に置くことにより
#     config.yml ファイルにコメントを追加できます。
# 4-15 行目: 最初のジョブは Hello-World です。
#     パート 1 でのように、基本的なイメージ内で 2 つのコマンドを実行します。
# 17 行目: 2 つ目のジョブは Fetch-Code です。 
#     これは、_Hello-World_job に合わせてインデントされます。
# 18-19 行目: Fetch-Code ジョブは、Git 互換の基本的なイメージを使用します。
# 23-29 行目: このコードはパート 2 から繰り返されていますが、ここでは別個のジョブです。
# 31 行目: 3 つ目のジョブは Using-Node です。
# 32-33 行目: この Using-Node ジョブは、cimg/node:17.2 という Docker イメージを使用します。 
#     このイメージには、ブラウザーと他の便利なツールと共に、Node の バージョン 17.2 が含まれています。
# 37-41 行目: これまでのジョブ同様に、run ステップがあります。 
#     ここでは、コマンド node -v がコンテナで実行する Node のバージョンを出力します。
# 42-43 行目: この行は、Example-Workflow というワークフローを作成します。
#     ワークフローは、ジョブのリストとその実行順を定義します。
# 44-45 行目: これらの行は最初のジョブである Hello-World を指定します。
# 46-48 行目: Fetch-Code ジョブ用の構文は少し異なります。
#     ジョブ名の後ろには requires: が続き、その後ろに requires ステートメントが続きます。
#     この行は、Fetch-Code ジョブを実行する前に、
#     Hello-World ジョブを正常に実行する必要があることを示します。
# 49-51 行目: 最初のジョブは Using-Node です。 
#     上記と同様に、このジョブもその前のジョブ、 Fetch-Code が正常に完了している必要があります。

# -----------------------------------------------------------
  version: 2.1
  jobs:
    # running commands on a basic image
    Hello-World:
      docker:
        - image: alpine:3.15
          auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
      steps:
        - run:
            name: Saying Hello
            command: |
              echo 'Hello World!'
              echo 'This is the delivery pipeline'
    # fetching code from the repo
    Fetch-Code:
      docker:
        - image: cimg/base:2021.04
          auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
      steps:
        - checkout
        - run:
            name: Getting the Code
            command: |
              ls -al
              echo '^^^Your repo files^^^'
    # running a node container
    Using-Node:
      docker:
        - image: cimg/node:17.2
          auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
      steps:
        - run:
            name: Running the Node Container
            command: |
              node -v
    Now-Complete:
      docker:
        - image: alpine:3.15
          auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
      steps:
        - run:
            name: Approval Complete
            command: |
              echo 'The work is now complete.'
  
  workflows:
    Example-Workflow:
      jobs:
        - Hello-World
        - Fetch-Code:
            requires:
              - Hello-World
        - Using-Node:
            requires:
              - Fetch-Code
        - Hold-for-Approval:
            type: approval
            requires:
              - Using-Node
              - Fetch-Code
        - Now-Complete:
            requires:
              - Hold-for-Approval

# 64-68 行目: これにより、Hold-for-Approval という新しいジョブが作成されます。
#     type で approval と指定されています
#     そのため、CircleCI でこのジョブを手動で承認することが求められます。
#     これは、それまでのジョブが期待どおりに実行されたかどうかを確認する場合に便利です。
#     例えば、Web サイトを公開する前にテストサーバー上で正常に見えるかどうかを確認できます。
#     または、高コストのジョブを実行する前に、人間による確認を行いたい場合などです。
# 69-71 行目: この最後のジョブ Now-Complete は、Hold-for-Approval が正常に完了
#     していることを前提とし、CircleCI でその前のジョブを承認した場合にのみ実行されます。